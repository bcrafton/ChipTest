
(1)
SRAM BER in C code (chip2)
> how to read ecc memory into registers to compute on it
> cant ...
> maybe we can use the tensor core to do it ??
> yeah I think we could craft something up, where we loop around and write memory in one location and read it somewhere else
> to maximize memory operations

(4)
programs with CAM / CIM

(5)
sweeps with not all 0xffffffff and WLB
collect just random data results ? 

----

what figures ?
> 4/8/16/32
> BER 
> (-1), (-2) BER
> shmoo, power, power breakdown, area breakdown
> irdrop? channel mismatch? off-state current?
> linearity, confusion matrix
> read disturb
>> Mismatch, linearity
>> Then VDD scaling, power

----

compute VDD/AVDD_CIM/AVDD_SRAM
> can even interpolate data

WLB + WL accumulation
> and i guess adding like 0xf0 + 0x0f

running larger cam operations
> digital ones that is
> digital cam programs ?

running matmul with ecache unpack and ecc
> AVDD_SRAM cant go below 500mV (without board changes)

----
done
----

> cam1 / cam6
  > wow CAM1 actually works fine ... (0xb ... not 0x4)
  > yeah cam6 works, output bits just not grabbed right.

> write masking? DIN=0, DINB=0

> figure out how to use the DAC on chip ? 

> figure out chip2 ?
  > solder issues

> access other CAM (sel=01)

> reading l2 cache

> set_dac(name, code) -- so we dont have to put 4mV or w.e. to get min change ?

running a larger matmul
> how many registers we got ? 
	> only 8 registers ...
> compiler:matmul 
	> generate matrix multiplication code
	> no loops initially


(1)
how to compute comparator mismatch ?
> just sample VBL with 0 bitcells on ? 
> 1 bitcell on all the way down the array ?

(2) 
run confusion matrix on 16.all data ... want to see if actually 80%

(3)
can we try running all sims in c code ?

----

